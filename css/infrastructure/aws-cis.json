{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS CloudTrail API Activity Alarm Template for CloudWatch Logs",
	"Parameters": {
		"LogGroupName": {
			"Type": "String",
			"Default": "CloudTrail/Logs",
			"Description": "Enter CloudWatch Logs log group name. Default is CloudTrail/DefaultLogGroup"
		},
		"AccountName": {
			"Type": "String",
			"Description": "Enter name of account.  No spaces"
		}
	},
	"Resources": {
		"SecurityGroupChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "SecurityGroupEventCount",
					"MetricValue": "1"
				}]
			}
		},
		"SecurityGroupChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailSecurityGroupChanges"]]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a Security Group.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "SecurityGroupEventCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"RouteTableChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "RouteTableChangeCount",
					"MetricValue": "1"
				}]
			}
		},
		"RouteTableChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "RouteTableChanges"]]
				},
				"AlarmDescription": "Alarms when RouteTables are changed",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "RouteTableChangeCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"NetworkAclChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "NetworkAclEventCount",
					"MetricValue": "1"
				}]
			}
		},
		"NetworkAclChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailNetworkAclChanges"]]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a Network ACL.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "NetworkAclEventCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"GatewayChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "GatewayEventCount",
					"MetricValue": "1"
				}]
			}
		},
		"GatewayChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailGatewayChanges"]]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a Customer or Internet Gateway.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "GatewayEventCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"VpcChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "VpcEventCount",
					"MetricValue": "1"
				}]
			}
		},
		"VpcChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailVpcChanges"]]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to classic.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "VpcEventCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"EC2InstanceChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = RunInstances) || ($.eventName = RebootInstances) || ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName = TerminateInstances) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "EC2InstanceEventCount",
					"MetricValue": "1"
				}]
			}
		},
		"EC2InstanceChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailEC2InstanceChanges"]]
				},
				"AlarmDescription": "Alarms when an API call is made to create, terminate, start, stop or reboot an EC2 instance.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "EC2InstanceEventCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"EC2LargeInstanceChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = RunInstances) && (($.requestParameters.instanceType = *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "EC2LargeInstanceEventCount",
					"MetricValue": "1"
				}]
			}
		},
		"EC2LargeInstanceChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailEC2LargeInstanceChanges"]]
				},
				"AlarmDescription": "Alarms when an API call is made to create, terminate, start, stop or reboot a 4x or 8x-large EC2 instance.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "EC2LargeInstanceEventCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"CloudTrailChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "CloudTrailEventCount",
					"MetricValue": "1"
				}]
			}
		},
		"CloudTrailChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailChanges"]]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "CloudTrailEventCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"ConsoleSignInFailuresMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\") }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "ConsoleSignInFailureCount",
					"MetricValue": "1"
				}]
			}
		},
		"ConsoleSignInFailuresAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailConsoleSignInFailures"]]
				},
				"AlarmDescription": "Alarms when an unauthenticated API call is made to sign into the console.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "ConsoleSignInFailureCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "3"
			}
		},
		"ConsoleSignInMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = ConsoleLogin) && ($.userIdentity.type = \"IAMUser\") }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "ConsoleSignInCount",
					"MetricValue": "1"
				}]
			}
		},
		"ConsoleSignInAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "ConsoleSignIn"]]
				},
				"AlarmDescription": "Alarms when an unauthenticated API call is made to sign into the console.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "ConsoleSignInCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"ConsoleSignInNoMFAFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = ConsoleLogin) && ($.userIdentity.sessionContext.attributes.mfaAuthenticated != \"true\")  }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "ConsoleSignInNoMFA",
					"MetricValue": "1"
				}]
			}
		},
		"ConsoleSignInNoMFAAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "ConsoleSignInNoMFA"]]
				},
				"AlarmDescription": "Alarms when an unauthenticated API call is made to sign into the console.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "ConsoleSignInNoMFA",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"RootActionsFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.userIdentity.type = \"Root\") && ($.userIdentity.invokedBy NOT EXISTS) && ($.eventType != \"AwsServiceEvent\") }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "RootActions",
					"MetricValue": "1"
				}]
			}
		},
		"RootActionsAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "RootActions"]]
				},
				"AlarmDescription": "Alarms when an action is taken by root.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "RootActions",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"PublicELBFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateLoadBalancer) && ($.requestParameters.scheme = \"internet-facing\") }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "PublicELBCount",
					"MetricValue": "1"
				}]
			}
		},
		"PublicELBAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "PublicELB"]]
				},
				"AlarmDescription": "Alarms when a public ELB is created",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "PublicELBCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"CMKDisablingDeletionFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "CMKDisablingDeletion",
					"MetricValue": "1"
				}]
			}
		},
		"CMKDisablingDeletionAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CMKDisableDelete"]]
				},
				"AlarmDescription": "Alarms when a CMK KMS key is disabled or scheduled for deletion",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "CMKDisablingDeletion",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"S3BucketPolicyChangesFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "S3BucketPolicyChanges",
					"MetricValue": "1"
				}]
			}
		},
		"S3BucketPolicyChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "S3BucketPolicyChanges"]]
				},
				"AlarmDescription": "Alarms when an S3 Bucket Policy changes",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "S3BucketPolicyChanges",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"AWSConfigFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "AWSConfig",
					"MetricValue": "1"
				}]
			}
		},
		"AWSConfigAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "AWSConfigChanges"]]
				},
				"AlarmDescription": "Alarms when AWS Config changes occur",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "AWSConfig",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"AuthorizationFailuresMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "AuthorizationFailureCount",
					"MetricValue": "1"
				}]
			}
		},
		"AuthorizationFailuresAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailAuthorizationFailures"]]
				},
				"AlarmDescription": "Alarms when an unauthorized API call is made.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "AuthorizationFailureCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"IAMPolicyChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{(($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)) && (($.userIdentity.userName=*)||($.userIdentity.sessionContext.sessionIssuer.userName != role-AnsibleTower))}",
				"MetricTransformations": [{
					"MetricNamespace": "CloudTrailMetrics",
					"MetricName": "IAMPolicyEventCount",
					"MetricValue": "1"
				}]
			}
		},
		"IAMPolicyChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, "CloudTrailIAMPolicyChanges"]]
				},
				"AlarmDescription": "Alarms when an API call is made to change an IAM policy.",
				"AlarmActions": [{
					"Ref": "AlarmNotificationTopic"
				}],
				"MetricName": "IAMPolicyEventCount",
				"Namespace": "CloudTrailMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1"
			}
		},
		"AlarmNotificationTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"Subscription": [{
					"Endpoint": "samal.dimdung@bcbsnc.com",
					"Protocol": "email"
				}, {
					"Endpoint": "DG-AWS-DevOps@bcbsnc.com",
					"Protocol": "email"
				}],
				"TopicName": {
					"Fn::Join": ["-", [{
						"Ref": "AccountName"
					}, {
						"Ref": "AWS::Region"
					}, "security-alerts"]]
				}
			}
		}
	}
}